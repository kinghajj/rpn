Style Guide for RPN
by Samuel Fredrickson <kinghajj@gmail.com>
2008-03-03

0. About this Document
----------------------

	This is a simple style guideline for the RPN project. All code in the
	project must follow these rules, which are subject to change at any time.

1. Tabs, Spaces and Alignment
-----------------------------

	Use tabs to indent, spaces to align. No exceptions. This is so that those
	who prefer 2, 4, or 8 width tabs can see the source in their prefered way
	without messing up the alignment.

	Here are some example function declarations. Note that "[tb]" represents a
	tab character.

int RPN_hereIsALongFunctionWithSomeSmallParameters(int firstParam,
                                                   int secondParam);
int RPN_andHereIsALongFunctionWithManyLongParameters(int a, double b,
                                                     RPN_Calculator *calc);
int RPN_thisNameIsWayTooLongButIsIncludedJustInCaseItsEverNeeded(
[tb]RPNCalculator *calc, RPNValue v);

	And here's an example definition of a function.

int RPN_hereIsALongFunctionWithManyLongParameters(int firstParam,
                                                  int secondParam)
{
[tb]if(firstParam == secondParam)
[tb][tb]RPN_printf("firstParam == secondParam\n");
[tb]return firstParam + secondParam;
}

	You may also choose to align assignments if it's logical to do so. But
	again, use spaces to align to keep the alignment portable.

2. Curly Bracket Placement
--------------------------

	I prefer the BSD/Allman style, which puts curly brackets on their own line
	with the same indentation as the control structure or function, but I'm
	tolerant of the K&R style. The GNU and Pico styles are just ugly.

3. Variable Declaration
-----------------------

	Although modern C compilers let you declare a variable anywhere within a
	function, for this project, declare all variables at the beginning. Writing
	the variables you think you'll need can help you plan a function, and having
	all declarations together can make it easier to remove unneeded ones.

4. 80-Column Limit
------------------

	I write my code to follow the 80-column limit, but I realize that that limit
	can be reached sooner by those who view code with and 8 width tab, or later
	by those who use a 2 width tab, so the limit does not need to be followed.
	Try to stay below 120 columns, though; your code should never need to get
	that wide.
